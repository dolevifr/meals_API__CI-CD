name: assignment3
on:
  push:
jobs:

  build:
      runs-on: ubuntu-latest
      steps:
      - name: Set DATE
        run: echo "DATE=$(date -Iminutes)" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create log.txt file
        run: touch log.txt
      - name: Insert date and names to log.txt
        run: |
          echo ${{ env.DATE }} >> log.txt
          echo "Itay Finkelshtein, Dolev Ifrah" >> log.txt
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          tags: meals-service:latest
          outputs: type=docker,dest=/tmp/image.tar

      - name: Check successful image creation and write to log file
        if: success()
        run: echo "image successfully built" >> log.txt

      - name: Check failed image creation and write to log file
        if: failure()
        run: echo "image not able to be built" >> log.txt

      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: meals-service-docker-image
          path: /tmp/image.tar

      - name: Upload log file artifact
        uses: actions/upload-artifact@v3
        with:
          name: log-file
          path: log.txt



  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      #    1. download image and run it in a container
      - name: Download all artifacts
        uses: actions/download-artifact@v3  # downloads all artifacts
      - name: Load Docker images from previous workflows
        run: docker load --input meals-service-docker-image/image.tar
      - name: Check meals-service image is loaded
        run: docker image ls
      - name: Run image in container
        run: docker run -p8000:8000 meals-service &
      - name: Check container is running
        run: docker ps
      - name: Write to log file when running container succeed
        if: success()
        run: echo "Container up and running" >> /home/runner/work/meals_API__CI-CD/meals_API__CI-CD/log-file/log.txt
      - name: Write to log file when running container failed
        if: failure()
        run: echo "Container failed to run" >> /home/runner/work/meals_API__CI-CD/meals_API__CI-CD/log-file/log.txt

      #     2. set up python and pytest environment
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest # not using yet lint checker like ruff
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      #      3. run pytest tests and check results
      - name: Test with pytest  # additionally use ruff or other lint checkers
        run: |
          cd tests
          pytest -v assn3_tests.py > assn3_test_results.txt
          echo "TESTS_RES_CODE=$?" >> $GITHUB_ENV

      - name: Check if all tests are succesful and write to log file
        if: always()
        run: |  
          if [[ [-z ${{ env.TESTS_RES_CODE }}] || ${{ env.TESTS_RES_CODE }} -ne 0 ]]; then
            echo "tests failed" >> /home/runner/work/meals_API__CI-CD/meals_API__CI-CD/log-file/log.txt
          else
            echo "tests succeeded" >> /home/runner/work/meals_API__CI-CD/meals_API__CI-CD/log-file/log.txt
          fi
      - name: Upload test results
        if: always()   #always perform this step even if tests fail, to see results
        uses: actions/upload-artifact@v3
        with:
          name: test_results
          path: tests/assn3_test_results.txt

      - name: Upload log file artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: log-file
          path: /home/runner/work/meals_API__CI-CD/meals_API__CI-CD/log-file/log.txt


  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download all artifacts
      uses: actions/download-artifact@v3  # downloads all artifacts
    - name: Load Docker images from previous workflows
      run: docker load --input meals-service-docker-image/image.tar
    - name: Check meals-service image is loaded
      run: docker image ls
    - name: Run image in container
      run: docker run -p8000:8000 meals-service &
    - name: Check container is running
      run: docker ps

    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run query handler
      run: |
        PATH_OF_QUERY_FILE=$PWD
        QUERY_FILE_NAME="${PATH_OF_QUERY_FILE}/query.txt"
        cd tests
        python3 -c "import query_handler; query_handler.handle_query_txt(\"$QUERY_FILE_NAME\")" >> response.txt

    - name: Upload response artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: response.txt
        path: tests/response.txt
        
        

